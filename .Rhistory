mydata_step$assign
mydata_step$formula
mydata_step$call
mydata_step$anova
step(mydata_seas)
seas_step<-step(mydata_seas)
seas_step$anova
summary(mydata_seas)
mydata_seas12 <- lm(mydata$TotN_conc~mydata$Time+mydata$Month_cat[1:11])
mydata_seas12
mydata$Month_cat[1]
mydata$Month_cat[[1]]
mydata$Month_cat
mydata$Month_cat02
#ASSIGNMENT 3
#a) install package astsa, library(astsa)
oil_ts <- ts(oil)
gas_ts <- ts(gas)
plot(ts.intersect(oil_ts,gas_ts))
#b) log transformation
oil_log <- log(oil_ts)
gas_log <- log(gas_ts)
plot(ts.intersect(oil_log, gas_log))
#c) detrended, first difference, x_t = oil, y_t = gas
firstdiff_oil <- diff(oil_log)
plot(firstdiff_oil, main="First difference oil_log")
firstdiff_gas <- diff(gas_log)
plot(firstdiff_gas, main ="First difference gas_log")
plot(cbind(firstdiff_gas,firstdiff_oil))
acf(firstdiff_gas)
acf(firstdiff_oil)
oil_log_reg <- lm(oil_log~time(oil_log), na.action=NULL)
oil_log_res <- residuals(oil_log_reg)
gas_log_reg <- lm(gas_log~time(gas_log), na.action=NULL)
gas_log_res <- residuals(gas_log_reg)
plot(cbind(oil_log_res,gas_log_res))
#ASSIGNMENT 3
#a) install package astsa, library(astsa)
library(astsa)
oil_ts <- ts(oil)
gas_ts <- ts(gas)
plot(ts.intersect(oil_ts,gas_ts))
#b) log transformation
oil_log <- log(oil_ts)
gas_log <- log(gas_ts)
plot(ts.intersect(oil_log, gas_log))
#c) detrended, first difference, x_t = oil, y_t = gas
firstdiff_oil <- diff(oil_log)
plot(firstdiff_oil, main="First difference oil_log")
firstdiff_gas <- diff(gas_log)
plot(firstdiff_gas, main ="First difference gas_log")
plot(cbind(firstdiff_gas,firstdiff_oil))
acf(firstdiff_gas)
acf(firstdiff_oil)
oil_log_reg <- lm(oil_log~time(oil_log), na.action=NULL)
oil_log_res <- residuals(oil_log_reg)
gas_log_reg <- lm(gas_log~time(gas_log), na.action=NULL)
gas_log_res <- residuals(gas_log_reg)
plot(cbind(oil_log_res,gas_log_res))
plot(oil_log_reg)
oil_log_reg
oil_log_reg$model
oil_ts
?gas
lag.plot(x,lags=3)
lag.plot(oil_log_reg,lags=3)
lag.plot(oil_log,lags=3)
lag.plot(gas_log, lags=3)
x<- firstdiff_oil
y<- firstdiff_gas
#d)
lag.plot(x,lags=3)
lag.plot(y, lags=3)
lag2.plot(series1 = x, series2 = y, max.lag = 3)
?lag2.plot
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, x2 <- lag(x,-1), indi)
summary(fit <- lm(y~ x + x2 + indi, data=mess))
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, xL <- lag(x,-1), indi)
summary(fit <- lm(y~ x + xL + indi, data=mess))
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, lag(x,-1), indi)
summary(fit <- lm(y~ x + lag(x,-1) + indi, data=mess))
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, lag(x,1), indi)
summary(fit <- lm(y~ x + lag(x,1) + indi, data=mess))
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, x2=lag(x,-1), indi)
summary(fit <- lm(y~ x + x2 + indi, data=mess))
fit_res<-residuals(fit)
plot(fit_res)
acf(fit_res)
Month1 <- ifelse(mydata$Month==1,1,0)
Month2 <- ifelse(mydata$Month==2,1,0)
Month3 <- ifelse(mydata$Month==3,1,0)
Month4 <- ifelse(mydata$Month==4,1,0)
Month5 <- ifelse(mydata$Month==5,1,0)
Month6 <- ifelse(mydata$Month==6,1,0)
Month7 <- ifelse(mydata$Month==7,1,0)
Month8 <- ifelse(mydata$Month==8,1,0)
Month9 <- ifelse(mydata$Month==9,1,0)
Month10 <- ifelse(mydata$Month==10,1,0)
Month11 <- ifelse(mydata$Month==11,1,0)
Month12 <- ifelse(mydata$Month==12,1,0)
seas_model <- lm(mydata$TotN_conc~mydata$Time+Month1+Month2+Month3+Month4+Month5+Month6+Month7+Month8+Month9+Month10+Month11+Month12)
summary(seas_model)
seasmodel_res <- residuals(seas_model)
seasmodel_step <- step(seas_model, scope=list(lower=mydata_seas1,upper=seas_model), direction="forward")
seasmodel_step$anova
step(seas_model)
seas_step<-step(seas_model)
seas_step$anova
seas_step$model
seas_step$coefficients
seas_step$rank
seas_step$xlevels
seas_step$effects
seas_step$terms
seas_step$call
seas_step
seas_step$call
mydata_step <- step(mydata_seas,scope=list(lower=mydata_fit,upper=mydata_seas), direction="backward")
mydata_step$call
seas_step
seas_step$call
seas_step<-step(seas_model)
seas_step$anova
seas_step
seas_step$call
mydata_step <- step(mydata_seas,scope=list(lower=mydata_fit,upper=mydata_seas), direction="backward")
mydata_step$call
seas_step<-step(seas_model)
seas_step$anova
seas_step
seas_step$call
seas_step<-step(seas_model)
seas_step
seas_step$anova
seas_model <- lm(mydata$TotN_conc~mydata$Time+Month1+Month2+Month3+Month4+Month5+Month6+Month7+Month8+Month9+Month10+Month11+Month12)
summary(seas_model)
seasmodel_res <- residuals(seas_model)
acf(seasmodel_res)
plot(seasmodel_res)
#ASSIGNMENT 1
#a)
#Time series 1: y(t)=cos(2*pi*t/5)
t<-seq(1,100, by=1)
Y1<-cos(2*pi*t/5)
plot(t,Y1, type="o", main="TS 1")
grid()
Y1_smooth<- filter(Y1, 0.2*c(1,1,1,1), method="recursive")
plot(t,Y1_smooth, type="o", main="Smooth TS 1")
grid()
plot(cbind(Y1_smooth, Y1))
#Time series 2: y(t)=-0.8*x(t-2)+w(t)
set.seed(12345)
Y2 <- arima.sim(model=list(ar=c(0,-0.8)),n=100)
plot(Y2, type="o", main="TS 2")
grid()
Y2_smooth<- filter(Y2, 0.2*c(1,1,1,1), method="recursive")
plot(t,Y2_smooth, type="o", main="Smooth TS 2")
grid()
plot(cbind(Y2_smooth, Y2))
#b) x(t)-4x(t-1)+2x(t-2)+x(t-5)=w(t)+3w(t-2)+w(t-4)-4w(t-6) causal and invertible?
z_causal<- c(1,-4,2,0,0,1)
polyroot(z_causal)
#some roots outside unit circle, but not all so not causal
z_inv <- c(1,0,3,0,1,0,-4)
polyroot(z_inv)
#some roots outside unit circle, but not all so not invertible
#c) x(t)+0.75x(t-1)=w(t)-w(t-2)/9
set.seed(54321)
Y3<-arima.sim(list(order=c(1,0,2), ar=0.75, ma=c(0,-(1/9))), n=100)
acf_sample <- acf(Y3)
acf_theor <- ARMAacf(ar=0.75, ma=c(0,-(1/9)),pacf = FALSE,lag.max = 20)
plot(acf_theor, type="h", xlab="lag", ylim=c(-1,1)); abline(h=0)
acf_sample[1:3]
acf_theor
#ASSIGNMENT 2
#a)
mydata <- read.csv(file="Rhine1.csv", sep=";")
plot.ts(mydata, main="mydata")
pairs(mydata)
lag.plot(mydata$TotN_conc,lags = 12)
#b)
mydata_fit <- lm(mydata$TotN_conc~mydata$Time,data=mydata, na.action = na.omit)
mydata_fit
summary(mydata_fit)
mydata_res<- residuals(mydata_fit)
plot(mydata_res)
acf(mydata_res)
#c)
mydata_ksmooth <- ksmooth(x=mydata$Time, y=mydata$TotN_conc,"normal", bandwidth = 2)
plot(x = mydata$Time, y= mydata$TotN_conc, main="mydata kernel")
lines(mydata_ksmooth)
ksmooth_reg<- lm(mydata_ksmooth$y~mydata_ksmooth$x, data=mydata_ksmooth, na.action=na.omit)
summary(ksmooth_reg)
ksmooth_res <- residuals(ksmooth_reg)
acf(ksmooth_res)
plot(ksmooth_res)
#d)
Month1 <- ifelse(mydata$Month==1,1,0)
Month2 <- ifelse(mydata$Month==2,1,0)
Month3 <- ifelse(mydata$Month==3,1,0)
Month4 <- ifelse(mydata$Month==4,1,0)
Month5 <- ifelse(mydata$Month==5,1,0)
Month6 <- ifelse(mydata$Month==6,1,0)
Month7 <- ifelse(mydata$Month==7,1,0)
Month8 <- ifelse(mydata$Month==8,1,0)
Month9 <- ifelse(mydata$Month==9,1,0)
Month10 <- ifelse(mydata$Month==10,1,0)
Month11 <- ifelse(mydata$Month==11,1,0)
Month12 <- ifelse(mydata$Month==12,1,0)
seas_model <- lm(mydata$TotN_conc~mydata$Time+Month1+Month2+Month3+Month4+Month5+Month6+Month7+Month8+Month9+Month10+Month11+Month12)
summary(seas_model)
seasmodel_res <- residuals(seas_model)
acf(seasmodel_res)
plot(seasmodel_res)
#e)
seas_step<-step(seas_model)
seas_step
seas_step$anova
#ASSIGNMENT 3
#a) install package astsa, library(astsa)
library(astsa)
oil_ts <- ts(oil)
gas_ts <- ts(gas)
plot(ts.intersect(oil_ts,gas_ts))
#b) log transformation
oil_log <- log(oil_ts)
gas_log <- log(gas_ts)
plot(ts.intersect(oil_log, gas_log))
#c) detrended, first difference, x_t = oil, y_t = gas
firstdiff_oil <- diff(oil_log)
plot(firstdiff_oil, main="First difference oil_log")
firstdiff_gas <- diff(gas_log)
plot(firstdiff_gas, main ="First difference gas_log")
plot(cbind(firstdiff_gas,firstdiff_oil))
acf(firstdiff_gas)
acf(firstdiff_oil)
oil_log_reg <- lm(oil_log~time(oil_log), na.action=NULL)
oil_log_res <- residuals(oil_log_reg)
gas_log_reg <- lm(gas_log~time(gas_log), na.action=NULL)
gas_log_res <- residuals(gas_log_reg)
plot(cbind(oil_log_res,gas_log_res))
x<- firstdiff_oil
y<- firstdiff_gas
#d)
lag2.plot(series1 = x, series2 = y, max.lag = 3)
#e)
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, x2=lag(x,-1), indi)
summary(fit <- lm(y~ x + x2 + indi, data=mess))
fit_res<-residuals(fit)
plot(fit_res)
acf(fit_res)
plot(acf_theor)
plot(acf_theor, type="h", xlab="lag", ylim=c(-1,1), main="theoretical ACF"); abline(h=0)
#ASSIGNMENT 1
#a)
#Time series 1: y(t)=cos(2*pi*t/5)
t<-seq(1,100, by=1)
Y1<-cos(2*pi*t/5)
plot(t,Y1, type="o", main="TS 1")
grid()
Y1_smooth<- filter(Y1, 0.2*c(1,1,1,1), method="recursive")
plot(t,Y1_smooth, type="o", main="Smooth TS 1")
grid()
plot(cbind(Y1_smooth, Y1))
#Time series 2: y(t)=-0.8*x(t-2)+w(t)
set.seed(12345)
Y2 <- arima.sim(model=list(ar=c(0,-0.8)),n=100)
plot(Y2, type="o", main="TS 2")
grid()
Y2_smooth<- filter(Y2, 0.2*c(1,1,1,1), method="recursive")
plot(t,Y2_smooth, type="o", main="Smooth TS 2")
grid()
plot(cbind(Y2_smooth, Y2))
#b) x(t)-4x(t-1)+2x(t-2)+x(t-5)=w(t)+3w(t-2)+w(t-4)-4w(t-6) causal and invertible?
z_causal<- c(1,-4,2,0,0,1)
polyroot(z_causal)
#some roots outside unit circle, but not all so not causal
z_inv <- c(1,0,3,0,1,0,-4)
polyroot(z_inv)
#some roots outside unit circle, but not all so not invertible
#c) x(t)+0.75x(t-1)=w(t)-w(t-2)/9
set.seed(54321)
Y3<-arima.sim(list(order=c(1,0,2), ar=0.75, ma=c(0,-(1/9))), n=100)
acf_sample <- acf(Y3)
acf_theor <- ARMAacf(ar=0.75, ma=c(0,-(1/9)),pacf = FALSE,lag.max = 20)
plot(acf_theor)
plot(acf_theor, type="h", xlab="lag", ylim=c(-1,1), main="theoretical ACF"); abline(h=0)
acf_sample[1:3]
acf_theor
#ASSIGNMENT 2
#a)
mydata <- read.csv(file="Rhine1.csv", sep=";")
plot.ts(mydata, main="mydata")
pairs(mydata)
lag.plot(mydata$TotN_conc,lags = 12)
#b)
mydata_fit <- lm(mydata$TotN_conc~mydata$Time,data=mydata, na.action = na.omit)
mydata_fit
summary(mydata_fit)
mydata_res<- residuals(mydata_fit)
plot(mydata_res)
acf(mydata_res)
#c)
mydata_ksmooth <- ksmooth(x=mydata$Time, y=mydata$TotN_conc,"normal", bandwidth = 2)
plot(x = mydata$Time, y= mydata$TotN_conc, main="mydata kernel")
lines(mydata_ksmooth)
ksmooth_reg<- lm(mydata_ksmooth$y~mydata_ksmooth$x, data=mydata_ksmooth, na.action=na.omit)
summary(ksmooth_reg)
ksmooth_res <- residuals(ksmooth_reg)
acf(ksmooth_res)
plot(ksmooth_res)
#d)
Month1 <- ifelse(mydata$Month==1,1,0)
Month2 <- ifelse(mydata$Month==2,1,0)
Month3 <- ifelse(mydata$Month==3,1,0)
Month4 <- ifelse(mydata$Month==4,1,0)
Month5 <- ifelse(mydata$Month==5,1,0)
Month6 <- ifelse(mydata$Month==6,1,0)
Month7 <- ifelse(mydata$Month==7,1,0)
Month8 <- ifelse(mydata$Month==8,1,0)
Month9 <- ifelse(mydata$Month==9,1,0)
Month10 <- ifelse(mydata$Month==10,1,0)
Month11 <- ifelse(mydata$Month==11,1,0)
Month12 <- ifelse(mydata$Month==12,1,0)
seas_model <- lm(mydata$TotN_conc~mydata$Time+Month1+Month2+Month3+Month4+Month5+Month6+Month7+Month8+Month9+Month10+Month11+Month12)
summary(seas_model)
seasmodel_res <- residuals(seas_model)
acf(seasmodel_res)
plot(seasmodel_res)
#e)
seas_step<-step(seas_model)
seas_step
seas_step$anova
#ASSIGNMENT 3
#a) install package astsa, library(astsa)
library(astsa)
oil_ts <- ts(oil)
gas_ts <- ts(gas)
plot(ts.intersect(oil_ts,gas_ts))
#b) log transformation
oil_log <- log(oil_ts)
gas_log <- log(gas_ts)
plot(ts.intersect(oil_log, gas_log))
#c) detrended, first difference, x_t = oil, y_t = gas
firstdiff_oil <- diff(oil_log)
plot(firstdiff_oil, main="First difference oil_log")
firstdiff_gas <- diff(gas_log)
plot(firstdiff_gas, main ="First difference gas_log")
plot(cbind(firstdiff_gas,firstdiff_oil))
acf(firstdiff_gas)
acf(firstdiff_oil)
oil_log_reg <- lm(oil_log~time(oil_log), na.action=NULL)
oil_log_res <- residuals(oil_log_reg)
gas_log_reg <- lm(gas_log~time(gas_log), na.action=NULL)
gas_log_res <- residuals(gas_log_reg)
plot(cbind(oil_log_res,gas_log_res))
x<- firstdiff_oil
y<- firstdiff_gas
#d)
lag2.plot(series1 = x, series2 = y, max.lag = 3)
#e)
indi <- ifelse(x<0,0,1)
mess <- ts.intersect(y, x, x2=lag(x,-1), indi)
summary(fit <- lm(y~ x + x2 + indi, data=mess))
fit_res<-residuals(fit)
plot(fit_res)
acf(fit_res)
name<-"Fanny Karelius"
liuid<-("fanka300")
library(markmyassignment)
lab_path <- "https://raw.githubusercontent.com/STIMALiU/AdvRCourse/master/Labs/Tests/lab1.yml"
set_assignment(lab_path)
show_tasks()
library(methods)
library(yaml)
library(testthat)
library(httr)
#VECTORS
my_num_vector <- function(){
c(log10(11),cos(pi/5),exp(pi/3),(1173%%7)/19)
}
my_num_vector()
filter_my_vector <- function(x,leq){
replace(x, leq<=x, NA)
}
filter_my_vector(x <- c(2, 9, 2, 4, 102), leq <- 4)
dot_prod <- function(a,b){
sum(a*b)
}
dot_prod(a <- c(3,1,12,2,4), b <- c(1,2,3,4,5))
dot_prod(a <- c(-1,3), b <- c(-3,-1))
approx_e <- function(N){
vect <- c(0:N)
newvect <- 1/factorial(vect)
sum(newvect)
}
exp(1)
approx_e(4)
approx_e(2)
approx_e(9) #requires N=9
#MATRICES
my_magic_matrix <- function(){
matrix(c(4,3,8,9,5,1,2,7,6), nrow=3)
}
my_magic_matrix()
#The sum of the elements of each row and column and diagonal equals 15
calculate_elements <- function(A){
length(A)
}
mat <- my_magic_matrix()
calculate_elements(mat)
new_mat <- cbind(mat,mat)
calculate_elements(new_mat)
row_to_zero <- function(A,i){
A[i,]<- 0
A
}
row_to_zero(mat,3)
add_elements_to_matrix <- function(A,x,i,j){
A[i,j] <- A[i,j]+x
A
}
add_elements_to_matrix(A = mat, x = 10, i = 2, j = 3)
add_elements_to_matrix(A = mat, x = -2, i = 1:3, j = 2:3)
#LISTS
my_magic_list <-function(){
my_list <- list(info="my own list", my_num_vector(), my_magic_matrix())
my_list
}
my_magic_list()
change_info <- function(x,text){
stopifnot("info" %in% names(x))
x$info<-text
x
}
a_list <- my_magic_list()
change_info(x = a_list, text = "Some new info")
add_note <- function(x, note){
x <- c(x, note=note)
x
}
add_note(x = a_list, note = "This is a magic list!")
sum_numeric_parts <- function(x){
sum_num<-0
for(i in 1:length(x)){
if(is.numeric(x[[i]])==TRUE){
sum_num <- sum_num +sum(x[[i]])
}
}
sum_num
}
a_list <- my_magic_list()
sum_numeric_parts(x=a_list)
sum_numeric_parts(x=a_list[2])
#DATA FRAMES
my_data.frame <- function(){
my_dframe <- data.frame("id"=1:3, "name"=c("John", "Lisa", "Azra"), "income"=c(7.30,0.00,15.21),"rich"=c(FALSE,FALSE,TRUE) )
my_dframe
}
my_data.frame()
sort_head <- function(df, var.name, n){
head(df[order(df[[var.name]], decreasing=TRUE), ], n)
#Solution from:
#https://stackoverflow.com/questions/12187891/how-to-get-top-n-companies-from-a-data-frame-in-decreasing-order
}
data(iris)
sort_head(df=iris, var.name="Petal.Length", n=5)
add_median_variable <- function(df,j){
m<-median(df[[j]])
k<-length(df[[j]])
median_vec <- character()
for(i in 1:k){
if(df[i,j]<m){
median_vec[i]<- 'Smaller'
}
else if(df[i,j]>m){
median_vec[i]<-'Greater'
}
else{
median_vec[i]<-'Median'
}
}
df <- data.frame(df,"compared_to_median"=median_vec)
}
data(faithful)
head(add_median_variable(df=faithful,1))
tail(add_median_variable(df=faithful,2))
analyze_columns <- function(df,j){
j_length <- length(j)
if(j_length==2){
vec1 <- c(mean=mean(df[[j[1]]]),median=median(df[[j[1]]]),sd=sd(df[[j[1]]]))
vec2 <- c(mean=mean(df[[j[2]]]),median=median(df[[j[2]]]),sd=sd(df[[j[2]]]))
corr_mat <- cor(df[,j[1:2]])
df_list <- list(vec1, vec2, corr_mat)
name_vec1 <- names(df[j[1]])
name_vec2 <- names(df[j[2]])
names(df_list)<- c(name_vec1,name_vec2, "correlation_matrix")
}
else{
stop()
}
df_list
}
analyze_columns(df = faithful, 1:2)
analyze_columns(df = iris, c(1,3))
analyze_columns(df = iris, c(4,1))
